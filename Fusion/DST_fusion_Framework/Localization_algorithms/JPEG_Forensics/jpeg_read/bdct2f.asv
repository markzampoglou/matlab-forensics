% BDCT 2-D Blocked discrete cosine transform, fast version
%
%    B = BDCT2F(A) computes DCT2 transform of A in 8x8 blocks.  Size of A 
%    must be multiple of 8. B is the same size as A and contains the cosine
%    transform coefficients for each block. This transform can be inverted 
%    using IBDCT.
%

function [b] = bdct2f(a)

tic
[r,c] = size(a);
if r & 3 | c & 3
  error('bdct2f: size of im
end


% pad with zeros to have size multiple of n
rtmp = floor(r/n)*n;
ctmp = floor(c/n)*n;
toc
tic
tmp = a(1:rtmp, 1:ctmp);
toc
% tic
% tmp(1:r,1:c) = a;
% toc
tic
% compute DCT matrix
C = dct(eye(n));
toc

% apply separable dct along columns and rows
tic
tmp = reshape(tmp, n, numel(tmp)/n);
toc
tic
tmp = C * tmp;
toc
tic
tmp = reshape(tmp, rtmp, ctmp);
toc
tic
tmp = reshape(tmp.', n, numel(tmp)/n);
toc
tic
tmp = C * tmp;
toc
tic
b = reshape(tmp, ctmp, rtmp).';
toc

return
